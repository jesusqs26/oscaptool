#!/usr/bin/python3
#
#   Open scap tool
#
#
# 02/28/24 jqs Create script
import os
import sys
import subprocess
import argparse
import datetime
import re
import json
 
# Run system commands and get output and err
def run_cmd(cmd='None'):
    cmd = cmd
    cmd_out, cmd_err = "", ""

    # Create subprocess, Run command, get out and err
    cmd_p = subprocess.Popen(cmd, executable='/bin/bash', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    cmd_out, cmd_err = cmd_p.communicate() 
    cmd_rc = cmd_p.returncode

    return cmd_rc, cmd_out, cmd_err

# Execute scan and print scan report.
def scan_and_print(file_name=""):
    if(file_name == True):
        now = str(datetime.datetime.now())
        now = now.replace(" ","_")
        file_name = "scan{0}".format(now)
    
    xml_file = "/tmp/oscap-results/{0}.xml".format(file_name)
    html_file = "/tmp/oscap-results/html/{0}.html".format(file_name)
    if(os.path.isfile(xml_file) or os.path.isfile(html_file)):
        return 1, "There is already a scan report with the same name. Try again with a different name.", err
    
    print("Executing open-scap security scan with stig profile...")
    rc, out, err = run_cmd("oscap xccdf eval --fetch-remote-resources --profile xccdf_org.ssgproject.content_profile_stig --results {0} /usr/share/xml/scap/ssg/content/ssg-ol8-ds.xml".format(xml_file))
    # Specifically 1 because 2 means scan went well but there is lack of compliance
    if rc == 1:
        return 1, "", "Something went wrong while executing open-scap. Aborting..."
    print("Generating html report in '{0}'.".format(html_file))
    rc, out, err = run_cmd("oscap xccdf generate report {xml} > {html}".format(xml=xml_file,html=html_file))
    if rc == 1:
        return 1, "", "Something went wrong while generating an html file with open-scap. Aborting..."

    rc, out, err = clean_report_and_save(file_name)

    return rc, out, err

# List available scan reports
def list_scan_hist():
    print("List of scan reports:")
    rc, out, err = run_cmd("ls /tmp/oscap-results/json/")
    out = out.decode('utf-8')
    print(out)
    return 0,"",""

# Print a scan report from the available json files
def print_by_id(id=None):
    json_file = "/tmp/oscap-results/json/{0}".format(id)
    if(not os.path.isfile(json_file)):
        return 1,"","Report id was not found. Run 'scaptool -l' to display list of available report ids."
    rc, json_report, err = run_cmd("cat {0}".format(json_file))
    report = json.loads(json_report)
    rc,out,err = format_report(report)
    return rc,out,err

# Print a report comparation between two available report jsons
def compare_reports(reportid1=None,reportid2=None):
    file1, file2 = "/tmp/oscap-results/json/{0}".format(reportid1), "/tmp/oscap-results/json/{0}".format(reportid2)
    if file1 == file2:
        return 1, "", "You are selecting the same report id twice."
    rc1, json_report1, err1 = run_cmd("cat {0}".format(file1))
    rc2, json_report2, err2 = run_cmd("cat {0}".format(file2))    
    if rc1 or rc2:
        return 1, "", "Couldn't retrieve the information from the specified reports."
    report1 = json.loads(json_report1)
    report2 = json.loads(json_report2)
    rc, out, err = format_report_compare(report1, report2)

    return rc, out, err

# Finds the information we need in the html file
def clean_report_and_save(file_name=""):
    html_file = "/tmp/oscap-results/html/{0}.html".format(file_name)
    json_file = "/tmp/oscap-results/json/{0}".format(file_name)
    # rc, out, err = run_cmd('awk \'/Rule results/, /<\/div><\/div><h3 title/{if (/Rule results/) {sub(/^.*Rule results/, "Rule results")} if (/<\/div><\/div><h3 title/) {sub(/<\/div><\/div><h3 title.*$/, "</div></div><h3 title")} print}\' {0}'.format(html_file))
    
    # rc, out, err = run_cmd("grep -E '^[0-9]+\s+[a-zA-Z]+$' '{0}'".format(out))
    # print(out)
    out = open(html_file, 'r').read()
    pattern = r'(\d+)\s+' + re.escape("passed")
    match = re.search(pattern, out)
    if match:
        passed = int(match.group(1))
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""

    pattern = r'(\d+)\s+' + re.escape("failed")
    match = re.search(pattern, out)
    if match:
        failed = int(match.group(1))
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""
    
    pattern = r'(\d+)\s+' + re.escape("other")
    match = re.findall(pattern, out)
    if match:
        other = int(match[0])
        sev_other = int(match[1])
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""

    total = passed + failed + other

    pattern = r'(\d+)\s+' + re.escape("low")
    match = re.search(pattern, out)
    if match:
        sev_low = int(match.group(1))
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""


    pattern = r'(\d+)\s+' + re.escape("medium")
    match = re.search(pattern, out)
    if match:
        sev_medium = int(match.group(1))
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""


    pattern = r'(\d+)\s+' + re.escape("high")
    match = re.search(pattern, out)
    if match:
        sev_high = int(match.group(1))
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""

    pattern = r'<td>urn:xccdf:scoring:default<\/td><td class="text-center">([\d.]+)<\/td>'
    match = re.search(pattern, out)
    if match:
        score = float(match.group(1))
    else:
        return 1, "Something went wrong, when looking for the report information. Aborting...",""

    date = str(datetime.datetime.now())
    report={
        "file_name":file_name,
        "date":date,
        "passed":passed,
        "failed":failed,
        "other":other,
        "sev_high":sev_high,
        "sev_medium":sev_medium,
        "sev_low":sev_low,
        "sev_other":sev_other,
        "score":score
    }

    
    report_json = json.dumps(report)
    print("Saving json file '{0}'.".format(json_file))
    rc,out,err = run_cmd("echo '{0}' > {1}".format(report_json,json_file))
    if rc:
        return 1, "Something went wrong while saving json file.", ""
    rc,out,err = format_report(report)
    return rc,out,err

# Prints a report from a dictionary
def format_report(report=None):
    if not report:
        return 1, "Report is empty",""
    out = """
===========================================================
        Open-scap scan results with stig profile
===========================================================

Report id: {file_name}
Date: {date}

Rule Results:
        Passed   Failed   Other
        {passed}    {failed}    {other} 
Severity of failed rules ----------------------------------
High                {sev_high}
Medium              {sev_medium}
Low                 {sev_low}
Other               {sev_other}


Score           {score}

------------------------------------------------------------
""".format(file_name=report['file_name'],date=report['date'],passed=report['passed'], failed=report['failed'], other=report['other'],
sev_high=report['sev_high'],sev_medium=report['sev_medium'],sev_low=report['sev_low'],sev_other=report['sev_other'],score=report['score'])

    return 0,out,""

def format_report_compare(report1=None, report2=None):

    if(not report1 or not report2):
        return 1, "One of the reports is empty",""
    out = """
===========================================================
           Open-scap scan results comparation
===========================================================

Report id 1: {file_name1}   Date: {date1}
Report id 2: {file_name2}   Date: {date2}

Rule Results:
            Report[{file_name1}]    Report[{file_name2}]
Passed          {passed1}                   {passed2}
Failed          {failed1}                   {failed2}
Other           {other1}                    {other2}

Severity of failed rules ----------------------------------
High            {sev_high1}                 {sev_high2}
Medium          {sev_medium1}               {sev_medium2}
Low             {sev_low1}                  {sev_low1}
Other           {sev_other1}                {sev_other1}


Score           {score1}                    {score2}

------------------------------------------------------------
""".format(file_name1=report1['file_name'],date1=report1['date'],passed1=report1['passed'], failed1=report1['failed'], other1=report1['other'],
sev_high1=report1['sev_high'],sev_medium1=report1['sev_medium'],sev_low1=report1['sev_low'],sev_other1=report1['sev_other'],score1=report1['score'],
file_name2=report2['file_name'],date2=report2['date'],passed2=report2['passed'], failed2=report2['failed'], other2=report2['other'],
sev_high2=report2['sev_high'],sev_medium2=report2['sev_medium'],sev_low2=report2['sev_low'],sev_other2=report2['sev_other'],score2=report2['score'])

    return 0,out,""

# Gets command arguments
def get_args():
    # Initialize parser
    parser = argparse.ArgumentParser(description="Open scap operations tool.")
    
    # Adding arguments
    parser.add_argument("-s", "--scan", action='store_true',help = "Execute scan and print scan report(-s ScanName).")
    parser.add_argument("-l", "--list", action='store_true', help = "List history of executed scans.(-l)")
    parser.add_argument("-p", "--print",help = "Print scan report by scan name.(-p ScanName)")
    parser.add_argument("-c", "--compare", nargs = 2, metavar=('id1','id2'),help = "Compare two scan reports available from the history by scan names(-c reportID1 reportID2).")

    
    # Read arguments from command line
    args = parser.parse_args()

    return args
 

#### MAIN ####
args = get_args()

if(not os.path.isdir("/tmp/oscap-results/json/")):
    run_cmd("mkdir -p /tmp/oscap-results/html/")
    run_cmd("mkdir -p /tmp/oscap-results/json/")

if args.scan:
    rc, out, err = scan_and_print(args.scan)
if args.list:
    rc, out, err = list_scan_hist()
if args.print:
    rc, out, err = print_by_id(args.print)
if args.compare:
    id1, id2 = args.compare
    rc, out, err = compare_reports(id1, id2)

if rc: print(err)
else: print(out)
sys.exit(rc)
